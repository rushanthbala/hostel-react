{"ast":null,"code":"import axios from \"axios\";\nimport { GET_ERRORS, GET_ROOMS, GET_ROOM, DELETE_ROOM, GET_HOSTELID } from \"./types\";\nexport const createRoom = (room, history) => async dispatch => {\n  try {\n    const res = await axios.post('http://localhost:8080/api/room', room);\n    history.push(\"/wardenDashboard\");\n    console.log(\"room\");\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const getRooms = () => async dispatch => {\n  const res = await axios.get('http://localhost:8080/api/rooms');\n  dispatch({\n    type: GET_ROOMS,\n    payload: res.data\n  });\n};\nexport const getRoom = (id, history) => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:8080/api/room/${id}`);\n    dispatch({\n      type: GET_ROOM,\n      payload: res.data\n    });\n  } catch (error) {\n    history.push(\"/wardenDashboard\");\n  }\n};\nexport const updateRoom = (room, history) => async dispatch => {\n  try {\n    const res = await axios.put('http://localhost:8080/api/room', room);\n    history.push(\"/wardenDashboard\");\n    console.log(\"room\");\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  }\n};\nexport const deleteRoom = (id, history) => async dispatch => {\n  if (window.confirm(\"Are you sure? This will delete the room and all the data related to it\")) await axios.delete(`http://localhost:8080/api/room/${id}`);\n  dispatch({\n    type: DELETE_ROOM,\n    payload: id\n  });\n};\nexport const getHostelId = (wardenId, history) => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:8080/api/hostelid/${wardenId}`);\n    dispatch({\n      type: GET_HOSTELID,\n      payload: res.data\n    });\n  } catch (error) {\n    history.push(\"/wardenDashboard\");\n  }\n};","map":{"version":3,"sources":["/home/venus/Downloads/hostel-react-master/src/actions/roomActions.js"],"names":["axios","GET_ERRORS","GET_ROOMS","GET_ROOM","DELETE_ROOM","GET_HOSTELID","createRoom","room","history","dispatch","res","post","push","console","log","err","type","payload","response","data","getRooms","get","getRoom","id","error","updateRoom","put","deleteRoom","window","confirm","delete","getHostelId","wardenId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { GET_ERRORS,GET_ROOMS,GET_ROOM,DELETE_ROOM ,GET_HOSTELID} from \"./types\";\n\nexport const createRoom = (room, history) => async dispatch => {\n  try {\n    const res = await axios.post('http://localhost:8080/api/room', room);\n    history.push(\"/wardenDashboard\");\n      console.log(\"room\");\n  } catch (err) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: err.response.data\n    });\n  } \n};\n\nexport const getRooms =() => async dispatch => {\n  const res = await axios.get('http://localhost:8080/api/rooms');\n  dispatch({\n    type:GET_ROOMS,\n    payload: res.data\n  });\n  }; \n\n  export const getRoom =(id, history) => async dispatch => {\n    try {\n      const res = await axios.get(`http://localhost:8080/api/room/${id}`);\n    dispatch({\n      type:GET_ROOM,\n      payload: res.data\n    });\n    } catch (error) {\n      history.push(\"/wardenDashboard\");\n    }\n    \n  };\n\n  export const updateRoom = (room, history) => async dispatch => {\n    try {\n      const res = await axios.put('http://localhost:8080/api/room', room);\n      history.push(\"/wardenDashboard\");\n        console.log(\"room\");\n    } catch (err) {\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    } \n  };\n\n  export const deleteRoom =(id,history)  => async dispatch => {\n\n    if (\n      window.confirm(\n        \"Are you sure? This will delete the room and all the data related to it\"\n      )\n    ) \n  \n    await axios.delete(`http://localhost:8080/api/room/${id}`);\n    dispatch({\n    \n      type:DELETE_ROOM,\n      payload: id\n    });\n  }\n\n  \n  export const getHostelId =(wardenId, history) => async dispatch => {\n    try {\n      const res = await axios.get(`http://localhost:8080/api/hostelid/${wardenId}`);\n    dispatch({\n      type:GET_HOSTELID,\n      payload: res.data\n    });\n    } catch (error) {\n      history.push(\"/wardenDashboard\");\n    }\n    \n  };\n  \n"]},"metadata":{},"sourceType":"module"}